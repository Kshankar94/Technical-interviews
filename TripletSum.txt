
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         //Start a normal loop from i, and have a 2 pointer between i+1 and len(arr)-1

	//yet to improvise. 
        
	//sorting so that we can use pointers approach	
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int similar = 0;

	
        for(int i=0; i<nums.length; i++){
	    //one static pointer i and two dynamic pointers(j and k)
            int j = i+1, k = nums.length - 1;
            
          
            while(j < k){
                int total = nums[i] + nums[j] + nums[k];
                if(total == 0){
                    List<Integer> target = Arrays.asList(nums[i], nums[j], nums[k]);
                    result.add(target);

		   //checking for duplicates
                   while(j < k && nums[k] == nums[k-1]){
                    k--;
                  }
                   while(j < k && nums[j+1] == nums[j]){
                    j++;
                  }
                    j++;
                    k--;
                   
                }
		//logic to manipulate the pointers
                else if(total > 0) {
                     k--; 
                }
                else if(total < 0) {
                    j++;
                }
                
            }
            
             while (i < nums.length - 1 && nums[i + 1] == nums[i]) {
                i++;
            }
        }
        return result;
    }
}
